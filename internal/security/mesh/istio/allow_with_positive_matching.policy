package istio

  has_key(x, k) {
	x[k]
    }

   policy_eval = {"namespace":namespace_name,"allow":allow_policy} {
    count(input.items) > 0
 	namespace_name = input.namespace
	some i
	input.items[i].kind == "AuthorizationPolicy"
	input.items[i].spec.action == "ALLOW"
    some k
    some p
	count(input.items[i].spec.rules[k].to[p].operation.paths) > 0
    count(input.items[i].spec.rules[k].to[p].operation.hosts) > 0
    count(input.items[i].spec.rules[k].to[p].operation.methods) > 0
    allow_policy = true
   }

  policy_eval = {"namespace":namespace_name,"allow":allow_policy} {
    count(input.items) == 0
 	namespace_name = input.namespace
    allow_policy = false
  }


   operation_methods_exist {
   count(input.items) > 0
 	namespace_name = input.namespace
	some i
	input.items[i].kind == "AuthorizationPolicy"
	input.items[i].spec.action == "ALLOW"
    some k
    some p
    obj:=input.items[i].spec.rules[k].to[p].operation
    has_key(obj,"methods")
 }

  operation_hosts_exist {
   count(input.items) > 0
 	namespace_name = input.namespace
	some i
	input.items[i].kind == "AuthorizationPolicy"
	input.items[i].spec.action == "ALLOW"
    some k
    some p
    obj:=input.items[i].spec.rules[k].to[p].operation
    has_key(obj,"hosts")
 }

 operation_paths_exist {
   count(input.items) > 0
 	namespace_name = input.namespace
	some i
	input.items[i].kind == "AuthorizationPolicy"
	input.items[i].spec.action == "ALLOW"
    some k
    some p
    obj:=input.items[i].spec.rules[k].to[p].operation
    has_key(obj,"paths")
 }

   policy_eval = {"namespace":namespace_name,"allow":allow_policy} {
  	namespace_name = input.namespace
	not operation_methods_exist
    allow_policy = false
    }
    policy_eval = {"namespace":namespace_name,"allow":allow_policy} {
  	namespace_name = input.namespace
	not operation_hosts_exist
    allow_policy = false
    }
    policy_eval = {"namespace":namespace_name,"allow":allow_policy} {
  	namespace_name = input.namespace
	not operation_paths_exist
    allow_policy = false
    }
